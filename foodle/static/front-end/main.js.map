{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/blog_post.service.ts","webpack:///./src/app/user.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<h2>Log In</h2>\\n<div class=\\\"row\\\" *ngIf=\\\"!_userService.token\\\">\\n  <div class=\\\"col-sm-4\\\">\\n    <label>Username:</label><br />\\n    <input type=\\\"text\\\" name=\\\"login-username\\\" [(ngModel)]=\\\"user.username\\\">\\n    <span *ngFor=\\\"let error of _userService.errors.username\\\"><br />{{ error }}</span></div>\\n  <div class=\\\"col-sm-4\\\">\\n    <label>Password:</label><br />\\n    <input type=\\\"password\\\" name=\\\"login-password\\\" [(ngModel)]=\\\"user.password\\\">\\n    <span *ngFor=\\\"let error of _userService.errors.password\\\"><br />{{ error }}</span>\\n  </div>\\n  <div class=\\\"col-sm-4\\\">\\n    <button (click)=\\\"login()\\\" class=\\\"btn btn-primary\\\">Log In</button>&nbsp;\\n  </div>\\n  <div class=\\\"col-sm-12\\\">\\n    <span *ngFor=\\\"let error of _userService.errors.non_field_errors\\\">{{ error }}<br /></span>\\n  </div>\\n</div>\\n<div class=\\\"row\\\" *ngIf=\\\"_userService.token\\\">\\n  <div class=\\\"col-sm-12\\\">You are logged in as {{ _userService.username }}.<br />\\n    Token Expires: {{ _userService.token_expires }}<br />\\n    <button (click)=\\\"refreshToken()\\\" class=\\\"btn btn-primary\\\">Refresh Token</button>&nbsp;\\n    <button (click)=\\\"logout()\\\" class=\\\"btn btn-primary\\\">Log Out</button>&nbsp;\\n  </div>\\n</div>\\n\\n<h2 class=\\\"mt-3\\\">Micro Blog Posts</h2>\\n<div *ngFor=\\\"let post of posts\\\">\\n  <div class=\\\"row mb-3\\\">\\n    <label class=\\\"col-md-2\\\">By:</label>\\n    <div class=\\\"col-md-2 mb-1\\\">{{ post.user }}</div>\\n    <label class=\\\"col-md-2\\\">Date:</label>\\n    <div class=\\\"col-md-6\\\">{{ post.date }}</div>\\n    <div class=\\\"col-md-12\\\">{{ post.body }}</div>\\n  </div>\\n</div>\\n\\n<h3>Create a new post:</h3>\\n\\n<div class=\\\"row mb-1\\\">\\n  <label class=\\\"col-md-3\\\">Enter your post:</label>\\n  <div class=\\\"col-md-9 mb-1\\\"><input type=\\\"text\\\" name=\\\"body\\\" [(ngModel)]=\\\"new_post.body\\\"></div>\\n  <div class=\\\"col-md-2 offset-3\\\">\\n    <button (click)=\\\"createPost()\\\" class=\\\"btn btn-primary\\\">Save</button>\\n  </div>\\n</div>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {BlogPostService} from './blog_post.service';\nimport {UserService} from './user.service';\nimport {throwError} from 'rxjs';  // Angular 6/RxJS 6\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n\n  /**\n   * An object representing the user for the login form\n   */\n  public user: any;\n\n  /**\n   * An array of all the BlogPost objects from the API\n   */\n  public posts;\n\n  /**\n   * An object representing the data in the \"add\" form\n   */\n  public new_post: any;\n\n  constructor(private _blogPostService: BlogPostService, private _userService: UserService) { }\n\n  ngOnInit() {\n    this.getPosts();\n    this.new_post = {};\n    this.user = {\n      username: '',\n      password: ''\n    };\n  }\n\n  login() {\n    this._userService.login({'username': this.user.username, 'password': this.user.password});\n  }\n\n  refreshToken() {\n    this._userService.refreshToken();\n  }\n\n  logout() {\n    this._userService.logout();\n  }\n\n  getPosts() {\n    this._blogPostService.list().subscribe(\n      // the first argument is a function which runs on success\n      data => {\n        this.posts = data;\n        // convert the dates to a nice format\n        for (let post of this.posts) {\n          post.date = new Date(post.date);\n        }\n      },\n      // the second argument is a function which runs on error\n      err => console.error(err),\n      // the third argument is a function which runs on completion\n      () => console.log('done loading posts')\n    );\n  }\n\n  createPost() {\n    this._blogPostService.create(this.new_post, this.user.token).subscribe(\n       data => {\n         // refresh the list\n         this.getPosts();\n         return true;\n       },\n       error => {\n         console.error('Error saving!');\n         return throwError(error);\n       }\n    );\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { BlogPostService } from './blog_post.service';\nimport { UserService } from './user.service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule, FormsModule, HttpClientModule\n  ],\n  providers: [BlogPostService, UserService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {UserService} from './user.service';\n\n@Injectable()\nexport class BlogPostService {\n\n  constructor(private http: HttpClient, private _userService: UserService) {\n  }\n\n  // Uses http.get() to load data from a single API endpoint\n  list() {\n    return this.http.get('/api/posts');\n  }\n\n  // send a POST request to the API to create a new data object\n  create(post, token) {\n    return this.http.post('/api/posts', JSON.stringify(post), this.getHttpOptions());\n  }\n\n  // helper function to build the HTTP headers\n  getHttpOptions() {\n    return {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'JWT ' + this._userService.token\n      })\n    };\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\n\n@Injectable()\nexport class UserService {\n\n  // http options used for making API calls\n  private httpOptions: any;\n\n  // the actual JWT token\n  public token: string;\n\n  // the token expiration date\n  public token_expires: Date;\n\n  // the username of the logged in user\n  public username: string;\n\n  // error messages received from the login attempt\n  public errors: any = [];\n\n  constructor(private http: HttpClient) {\n    this.httpOptions = {\n      headers: new HttpHeaders({'Content-Type': 'application/json'})\n    };\n  }\n\n  // Uses http.post() to get an auth token from djangorestframework-jwt endpoint\n  public login(user) {\n    this.http.post('/api-token-auth/', JSON.stringify(user), this.httpOptions).subscribe(\n      data => {\n        console.log('login success', data);\n        this.updateData(data['token']);\n      },\n      err => {\n        console.error('login error', err);\n        this.errors = err['error'];\n      }\n    );\n  }\n\n  /**\n   * Refreshes the JWT token, to extend the time the user is logged in\n   */\n  public refreshToken() {\n    this.http.post('/api-token-refresh/', JSON.stringify({token: this.token}), this.httpOptions).subscribe(\n      data => {\n        console.log('refresh success', data);\n        this.updateData(data['token']);\n      },\n      err => {\n        console.error('refresh error', err);\n        this.errors = err['error'];\n      }\n    );\n  }\n\n  public logout() {\n    this.token = null;\n    this.token_expires = null;\n    this.username = null;\n  }\n\n  private updateData(token) {\n    this.token = token;\n    this.errors = [];\n\n    // decode the token to read the username and expiration timestamp\n    const token_parts = this.token.split(/\\./);\n    const token_decoded = JSON.parse(window.atob(token_parts[1]));\n    this.token_expires = new Date(token_decoded.exp * 1000);\n    this.username = token_decoded.username;\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}